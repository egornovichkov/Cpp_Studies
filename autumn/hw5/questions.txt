1.  Объектно-ориентированное программирование базируется на трех принципах: 

    1.1.    Инкапсуляция - слияние публичных методов и приватных данных.
    То есть объект в рамках ООП является некоторой сущностью, объединяющей в себе и данные и логику работы с этими данными. При этом объект в такой концепции
    имеет скрытую от пользователя часть логики и данных (приватную) и открытую часть (публичные методы для работы с объектами). Таким образом пользователь
    не обязан знать как устроен данный объект изнутри, достаточно лишь понимания функций, которые выполняют публичные методы. Принцип инкапсуляции используется
    повсеместно, например, при введении пароля в форму на любом современном сайте. Задание пользователем пароля соответствует вызову сеттера, в случае
    неподходящего ввода сайт выдает предупреждение о слишком простом или недопустимом пароле. Таким образом, сеттер - публичен, но логика обработки
    пользовательского ввода не имеет для пользователя значения, а потому скрыта от него. При этом раскрываются некоторые детали логики, вроде "Нельзя 
    использовать специальные символы".

    1.2.    Полиморфизм - разные реализации логики в одинаковом интерфейсе.
    Примерами полиморфизма можно назвать перегрузку функций и приведение типов. Достаточно ясная для меня концепция на уровне понимания потому могу лишь 
    сказать, что эта концепция позволяют абстрагироваться от реализации логики класса и сконцетрироваться на работе с его интерфейсом (полезно как для
    пользователя в случае, например, ввода данных так и для программистов с++, ведь много функций стандартной библиотеки поддерживают перегрузки)

    1.3.    Наследование - передача некоторых свойств от родителя к потомку.
    Насколько я понимаю, концепция наследования позволяет выстраивать иерархическую связь между классами. Вверху иерархии стоит родитель, ниже по иерархии
    стоят его потомки. Потомки наследуют определенные программистом свойства от родителя, имея при этом возможность добавлять и свои собственные свойства.
    Таким образом можно удобно выстраивать длинные цепочки отображений или, другими словами, связывать сущности, причем при этом связывании свойства могут
    передаваться только в одном порядке (от верха иерархии к низу). Реализацию концепции наследования можно встретить, например, 

    1.4.    Абстракция - представление неких сущностей в виде абстракций в коде.
    Как и полиморфизм достаточно ясная для меня концепция. Суть абстракции есть отображение некой сущности (под сущностью в данном контексте я понимаю
    что-то, что можно описать при помощи конечного или бесконечного набора измеримых параметров и конечного или бесконечного набора правил, по которым
    эти параметры между собой связаны) в некоторый блок кода, например класс. (Который, конечно может иметь лишь конечные наборы данных и правил, причем
    эти правила и данные могут быть упрощены в соответствии с поставленной задачей). Таким образом абстракция в программировании очень похожа на построение
    мат. модели некоторого физического явления. Конечно, в любой прикладной задаче выявление этого отображения является одним из первых пунктов, который
    делает программист (часто это простая задача, но, вероятно, как и в случае создания физических теорий бывают очень сложные случаи).

2.  При проектировании классов следует помнить о нескольких правилах:

    2.1.    Следить за инвариантом класса
    Инвариантом класса называют условия, которые должны оставаться истинными на протяжении всего времени жизни экземпляра класса. Т.о. следует следить
    о том, что инвариант класса всегда выполняется.

    2.2.    Оформление классов
    Важно следить за тем, как вы пишете классы (для лучшей читабельности кода). Классы следует именовать с большой буквы, данные-члены начинать с префикса
    m_, первым располагать конструктор, затем функции-члены, потом деструктор и данные-члены.

    2.3.    В случае POD пользоваться структурами

3.  
1.  Процесс развертывания стека при выбросе исключения происходит следующим образом: первым шагом компилятор пытается найти инструкции для обработки
исключения в функции, выбросившей исключение. Если компилятор находит catch-блок с подходящим типом аргумента, то этот блок обрабатывает исключение и
программа продолжает работу. В случае если такого catch-блока в теле этой функции нет, компилятор переходит на уровень вложенности выше, т.е.
к функции в теле которой была вызвана функция, выбросившая исключение в попытке обработать это исключение. Таким образом компилятор последовательно
проходит по всей цепочке вложенных вызовов. Финально возможны две ситуации: компилятор обрабатывает исключение (нормальная ситуация), либо компилятор 
в развертывании стека доходит до конца main, так и не обработав исключение. Во втором случае будет вызвана функция std::terminate, которая в свою очередь 
по дефолту вызывает функцию abort. Функция abort аварийно завершает программу и является индикатором некорректной работы программы. Стоит также отметить,
что при развертывании стека прекращают существовать локальные переменные, объявленные в составных инструкциях и определениях функций, из которых произошел 
выход. Стандарт языка гарантирует, что во время описанного процесса вызываются деструкторы локальных объектов классов.

2.  Механизм использования кодов возврата имеет следующие недостатки:
    2.1. Неоднозначность - пусть функция возвращает int или double, в таком случае не получится отличить код возврата от нормального значения, возвращенного
    функцией.

    2.2. Для разных возвращаемых типов функции придется придумывать свои коды возврата, что неудобно и неуниверсально, приходится использовать union / 
    std::variant или передавать в функцию код возврата доп. аргументом типа ссылки.

    2.3. Логика с кодами возврата прописана в теле функции и, более того, блоки с этой логикой могут содержаться внутри других блоков функции, описывающих
    ее нормальное поведение. Таким образом, функцию становится труднее читать из-за доп. логики по обработке ненормальных ситуаций.

    2.4. Коды возврата по очевидным причинам не применимы в конструкторах, деструкторах и операторах.

3.  
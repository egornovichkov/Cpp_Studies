1.  Специальные функции-члены класса - функции-члены класса, прописанные по умолчанию. Если программист не определил функции из следующего ниже списка, будут
вызываться встроенные функции, называемые специальными функциями-членами класса.
    1. Конструктор по умолчанию
        Конструктор, вызываемый когда объекты класса объявлены, но не инициализированы какими-либо аргументами. Если программист не написал
        конструктор, при создании объекта вызовется именно конструктор по умолчанию, однако если конструктор написан, то компилятор не предоставляет 
        неявный конструктор по умолчанию и больше не позволяет объявлять объекты этого класса без аргументов.
    2. Конструктор копирующий
        Конструктор, который выполняет копирование. Тип первого параметра которого является ссылка (возможно константная) на собственный класс. Он может быть
        вызван с одним аргументом этого типа. Если класс не имеет других определенных конструкторов копирования или перемещения (или присваивания), неявно 
        предоставляется конструктор копирования. Этот конструктор просто производит копию своих членов. Копирующий конструктор по умолчанию выполняет лишь 
        поверхностное копирование, так что для классов, с полями типа указателей или более сложно устроенных классов он не подходит.
    3. Конструктор перемещающий
        Перемещающий конструктор перемещает данные от одного объекта к другому. Конструктор перемещения вызывается, когда объект инициализируется при создании 
        с использованием анонимного временного объекта. Этот конструктор принимает тип rvalue ссылки на объект класса.
    4. Деструктор
        Деструктор выполняет очистку, необходимую классу по истечении времени его жизни. Не принимает аргумент и ничего не возвращает.
    5. Оператор = копирующий
        Оператор присваивания копированием это перегрузка оператора operator=, который принимает значение или ссылку на объект такого же класса как параметр.
        Копирующий оператор = схож с копирующим конструктором.
    6. Оператор = перемещающий
        Оператор присваивания перемещением это перегрузка оператора operator=, который принимает принимают параметр типа ссылки rvalue на объект собственного
        класса. Копирующий оператор = схож с копирующим конструктором.

2.  Операторы operator<<, operator[], operator() можно и нужно перегружать. Это помогает свободно работать с пользовательским классом, придает форме вывода и 
индексации класса удобства и интуитивности. Аналогичная ситуация с операторами арифм. операций, операторами постфиксного и префиксного инкремента/декремента,
операторами сравнения: operator+, operator-, operator/, operator*, operator+=, operator-=, operator/=, operator*=, operator++, operator--, operator>,
operator<, operator>=, operator<=, operator==, operator<=> в случаях когда эти арифм. операции и операторы сравнения применимы к объектам класса. 
Также можно перегружать оператор operator->, например, для создания оболочки над указателями, называемой smart pointer'ом. 

Не рекомендуется перегружать операторы operator&, operator, .

Нельзя перегружать операторы operator::, operator., operator.* . К моему сожалению нельзя перегружать тернарный условный оператор operator? (хотя мне бы 
хотелось, это бы позволило писать более компактные конструкции)

3.  При перегрузке операторов следует помнить, о том, что не explicit операторы выполняют неявные преобразования типов данных. То есть по умолчанию компилятор
попытается преобразовать тип параметра к необходимому. explicit же операторы не выполняют преобразования типов.

4.  В зависимости от идентфицируемости и перемещаемости различают следующие категории выражений: lvalue (идентфицируемость +, перемещаемость -),
xvalue (идентфицируемость +, перемещаемость +), prvalue (идентфицируемость -, перемещаемость+). Общее название для идентифицируемых категорий: gvalue (lvalue
&& xvalue), для перемещаемых категорий: rvalue(xvalue && prvalue).

5.  rvalue-ссылка очень схожа с обыкновенной lvalue-ссылкой, за одним исключением: rvalue-ссылка может быть связана с анонимным объектом. Это необходимый
инструмент для реализации семантики перемещений.

6.  Семантика перемещения имеет следующее преимущество над семантикой копирования: перемещение тяжелого объекта выполняется быстрее его копирования.
Копирование выполняется за O(n) в случае без оптимизации, перемещение же выполняется за константное время. Помимо ускорения процесса получения данных
из одного вектора в другой, возникают случаи когда объект из которого перемещаются данные больше без надобности, в таком случае перемещение очевидно
имеет преимущество над копированием.

7.  Функция std::move предназначена для реализации семантики перемещения. Она является оберткой над static_cast, под капотом она убирает "убирает ссылку 
у переданного параметра" при помощи некоторой функции, а далее преобразует тип в rvalue-ссылку. Аргументом std::move может являться lvaule- или rvalue-ссылка, 
а возвращает функция rvalue-ссылку на переданный в нее параметр. Для перемещения при помощи оператора присваивания перемещением или вызова перемещающего 
конструктора необходима rvalue-ссылка именно поэтому std::move используется для перемещения. std::move не является необходимой в случае если тип уже является 
rvalue-ссылкой.

8.  Работа по перемещению выполняется непосредственно перемещающим конструктором либо оператором присваивания перемещением.

9.  Пользовательская реализации специальных-функций членов класса необходима в случаях когда дефолтные специальные-функции члены работают некорректно
(если класс содержит поля с указателями или что-то более сложное, то, например, копирующий конструктор будет выполнять лишь поверхностное копирование). 

10. Ключевые слова default и delete нужны для явного указания генерации спец. функции-члена по умолчанию и для запрета автоматического приведения типов в
конструкторах и методах класса соответственно. Использование default явно показывает, что в этом классе специальная функция-член по умолчанию генерируется 
компилятором. Это позволяет быстрее читать код (не приходится думать и залезать в правила языка). Использование delete наоборот явно показывает, что
в этом классе запрещено вызывать функцию-члена с указанными параметрами. Общая форма назначенияя ключегого слова delete для конструктора 
Class(parameters) = delete;
В случае если список параметров оставить пустым, будет запрещено вызывать конструктор по умолчанию. Аналогичным образом delete может применяться для
методов класса.
1.
    1.1.    Композиция - отношение "часть-целое", создание сложных объектов из более простых. 
    Характерные черты этого отношения: если A находится в композиции с B, то B управляет А. 
    В частности: A в конкретный момент принадлежит только одной сущности, B управляется А (например для классов, А управляет временем жизни В)
    А не знает о существовании В. Примером являются поля числителя и знаменателя из задачи с созданием класса дробей.

    1.2.    Агрегация - отношение "часть-целое", создание сложных объектов из более простых, отличие от композиции в том, что часть может принадлежать более
    чем одному родительскому классу, также родитель не управляет своей частью.
    Характерные черты этого отношения: если A находится в агрегации с B, то A является частью B, А может принадлежать более чем одной сущности,
    А не управляется В (например В не отвечает за создание/удаление А), А не знает о существовании В.
    Примером является человек и его автомобиль. Автомобиль принадлежит объекту человек, понятия не имеет какому человеку принадлежит, человек не несет
    никакой ответственности за создание или утилизацию этого конкретного автомобиля, более того если смотреть на вопрос неформально, то авто может быть 
    семейным, т.е. им могут пользоваться несколько человек.

    1.3.    Ассоциация - отношение "целое-целое", сущности не связаны между собой, но могут знать друг о друге.
    Характерные черты этого отношения: если А находится в ассоциации с В, то А не связан с В, А может принадлежать нескольким сущностям, А существует, не
    управляемый В, А может знать или не знать о В.
    Примером является отношение лектор-ученик. У ученика может быть несколько лекторов, у лектора несколько учеников, лектор может знать или не знать об
    ученике, лектор и ученик не связаны между собой.

    1.4.    Зависимость - отношение "зависимое целое-целое", одна сущность обращается к другой для использования ее функционала. Является частным случаем
    ассоциации, где используемая сущность обязательно не знает о сущности, которая ее использует. 
    Характерные черты этого отношеня: если А находится в зависимости от В, то А не связан с В, А может принадлежать нескольким сущностям, А существует,
    не управляемый В, А обязательно не знает о В.
    С зависимостями люди сталкиваются постоянно, например при обработке результатов лаб. При построении графика, например в экселе, нужно создать два
    столбца с данными, один из которых будет зависеть от другого. Если говорить о проектировании классов, то отношение зависимости обычно не используется 
    для отношений между двумя классами, зависимость обычно реализуется по сценарию "классу C нужно сделать что-то, для этого обращаемся к такому-то объекту,
    например std::ostream" 

    1.5.    Наследование - отношение "потомок-родитель", одна сущность перенимает все свойства другой. Моделирует тип отношения "является".
    Характерные черты этого отношения: если А находится в отношении "является" В, то А перенимает все свойства В, расширяя или конкретизируя их. Отношение
    не симметрично, то есть строго определена иерархия.

2.  Существует две разновидности наследования: наследование интерфейса и наследование реализации. Насколько я понимаю, чистое наследование интерфейса возможно
только в случае если родительский класс является чисто абстрактным. Таким образом подкласс этого класса сохраняет все поля родительского класса 
(т.н. интерфейс), однако на его плечи полностью ложится реализация функционала методов. (грубо говоря, родительский класс объявляет совокупность методов, а 
потомок должен сам придать им смысл). Для реализации наследования интерфейса в C++ используется ключевое слово "virtual" при объявлении методов базового класса. 
Наследование реализации же позволяет подклассу пользоваться уже определенными методами и данными родительского класса. Т.е. наследовать не только "сигнатуру",
но также и логику.

3.  Для корректной работы виртуальных методов необходимо помнить о следующих моментах: сигнатура виртуального метода дочернего класса должна полностью 
соответствовать сигнатуре виртуального метода родительского класса, виртуальные методы категорически не следует использовать в конструкторах и деструкторах.

4.  При множественном наследовании может возникнуть проблема алмаза смерти. Пусть есть класс B, подклассами которого являются D1 и D2, тогда если D12
наследует свойства и от D1 и от D2, то в него два раза передается объект В, то есть возникает проблема дублирования информации. Эта проблема решается
при указании ключевого слова после типа наследования, т.е. (D1: public virtual B{}; D2: public virtual B{}; C: public D1, public D2 {};)

5.  Будет добавлен в следующей дз
1.  При разработке функций следует помнить, что функции должны выполнять конкретную задачу, не стоит использовать объемные функции с большим
количеством блоков, лучше разбить ее на несколько разных функций. Название функции должно как можно понятнее и лаконичнее выражать ее суть.

2.  Для начала, встроенная функция - функция замененная на этапе компиляции на ее тело. Встраивание функций происходит если при объявлении
функции использовано ключевое слово inline (На самом деле встраивание при использовании inline происходит не всегда. Это слово не является
инструкцией для компилятора, скорее рекомендацией. Встраивание функции может происходить и без указания inline компилятором самостоятельно,
в случаях когда функция имеет простой вид без ветвений и циклов, также в случае объемных сложных функций ключевое слово inline может быть
проигнорировано компилятором). Использование inline при объявлении функций является С стилем и не является мастхэвом. Что касается самой
концепции встраивания, она помогает оптимизировать программу (компилятору при вызове функции не приходится тратить ресурсы для поиска определения
функции). По сути, встраивание функций схоже с использованием макросов, с тем различием, что макросы раскрываются на этапе препроцессинга, а
встраивание происходит на этапе компиляции.

3.  Аргументы по умолчанию должны следовать после объявления обычных аргументов. Если объявить аргументы по умолчанию первыми,а за ними
 объявить обычные аргументы, то компилятор выдаст ошибку.

4.  Во время вызова некоторой функции компилятор просматривает некоторую область видимости, содержащую несколько функций с одним именем.
Процесс выбора какая из этих функций лучше подходит для данного типа аргументов называется разрешением перегрузки. Выбор наиболее подходящей
функции компилятор делает на основании длинного списка правил, продиктованного компилятором и стандартом языка. Процесс сравнения двух функций
происходит на основании сравнения "подходящести" аргументов функций попарно (например, если функция f1 в точности удовлетворяет введенным типам
данных, а у функции f2 один аргумент проходит некоторое неявное преобразование в другой тип, то будет выбрана функция f1).

5.  Для обеспечения "состояния" функции используется ключевое слово static в ее объявлении. Под static функцию память выделяется в сегментах
памяти .data или .bss (в .bss инициализированные функции, в .data неинициализированные), а не в heap или stack. Для статических функций 
выделение памяти происходит только один раз и существуют эти функции до завершения программы.

Для лямбда-функций "состояние" обеспечивается при помощи сохранения лябмда-функции в переменную пространства имен std::function, т.о. с
лямбда-функцией можно работать как с обычной, в том числе можно применить ключевое слово static для обеспечения состояния функции.